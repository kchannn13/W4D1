quit
# k.find_path([6,3])
# k.build_move_tree
# k = KnightPathFinder.new([0,0])
end
   end 
        end
            nodes << node.children
            return node if node.value == end_pos
            node = nodes.shift
        until nodes.empty?
# debugger
        nodes = [PolyTreeNode.new(self.position)]
    # nodes = [self]
   def find_path(end_pos)
   end
    # return count
    end
        end
            queue << node
            node.parent = root_node
            root_node.children << node
            node = PolyTreeNode.new(pos)
        new_move_positions(root_node.value).each do |pos|
        # root_node.children = new_move_positions(pos)
        # poly = PolyTreeNode.new(pos)
        # end
        #     count += 1
        # if queue.shift != []
        root_node = queue.shift
    until queue.empty?
    # count = 0
    queue = [PolyTreeNode.new(self.position)]
   def build_move_tree
   end
    moves
    end
        end
            moves << move
            @considered_positions << move
        if !@considered_positions.include?(move)
    possible_moves.each do |move|
    moves = []
    possible_moves = KnightPathFinder.valid_moves(pos)
   def new_move_positions(pos)
    end
        end
            (pos[0] >= 0 && pos[0] <= 7) && (pos[1] >= 0 && pos[1] <= 7)
        valid_pos.select do |pos|
        x, y = pos
        valid_pos << [x,y]
        x += 1
        y -= 2
        x, y = pos
        valid_pos << [x,y]
        x -= 1
        y += 2
        x, y = pos
        valid_pos << [x,y]
        x -= 1
        y -= 2
        x, y = pos
        valid_pos << [x,y]
        x += 1
        y += 2
        x, y = pos
        valid_pos << [x,y]
        y += 1
        x -= 2
        x, y = pos
        valid_pos << [x,y]
        y -= 1
        x += 2
        x, y = pos
        valid_pos << [x,y]
        y -= 1
        x -= 2
        x, y = pos
        valid_pos << [x,y]
        y += 1
        x += 2
        x, y = pos
        valid_pos = []
    def self.valid_moves(pos)     
    end
        @considered_positions = [position]
        @position = position
        # @node = PolyTreeNode.new(pos) 
    def initialize(position)
attr_reader :position, :considered_positions, :node
class KnightPathFinder
require "byebug"
require_relative "00_tree_node.rb"
# k.find_path([6,3])
# k.build_move_tree
# k = KnightPathFinder.new([0,0])
end
   end 
    end
        nodes << node.children
        return node if node.value == end_pos
        node = nodes.shift
    until nodes.empty?
# debugger
    nodes = [PolyTreeNode.new(self.position)]
    # nodes = [self]
   def find_path(end_pos)
   end
    # return count
    end
        end
            queue << node
            node.parent = root_node
            root_node.children << node
            node = PolyTreeNode.new(pos)
        new_move_positions(root_node.value).each do |pos|
        # root_node.children = new_move_positions(pos)
        # poly = PolyTreeNode.new(pos)
        # end
        #     count += 1
        # if queue.shift != []
        root_node = queue.shift
    until queue.empty?
    # count = 0
    queue = [PolyTreeNode.new(self.position)]
   def build_move_tree
   end
    moves
    end
        end
            moves << move
            @considered_positions << move
        if !@considered_positions.include?(move)
    possible_moves.each do |move|
    moves = []
    possible_moves = KnightPathFinder.valid_moves(pos)
   def new_move_positions(pos)
    end
        end
            (pos[0] >= 0 && pos[0] <= 7) && (pos[1] >= 0 && pos[1] <= 7)
        valid_pos.select do |pos|
        x, y = pos
        valid_pos << [x,y]
        x += 1
        y -= 2
        x, y = pos
        valid_pos << [x,y]
        x -= 1
        y += 2
        x, y = pos
        valid_pos << [x,y]
        x -= 1
        y -= 2
        x, y = pos
        valid_pos << [x,y]
        x += 1
        y += 2
        x, y = pos
        valid_pos << [x,y]
        y += 1
        x -= 2
        x, y = pos
        valid_pos << [x,y]
        y -= 1
        x += 2
        x, y = pos
        valid_pos << [x,y]
        y -= 1
        x -= 2
        x, y = pos
        valid_pos << [x,y]
        y += 1
        x += 2
        x, y = pos
        valid_pos = []
    def self.valid_moves(pos)     
    end
        @considered_positions = [position]
        @position = position
        # @node = PolyTreeNode.new(pos) 
    def initialize(position)
attr_reader :position, :considered_positions, :node
class KnightPathFinder
require "byebug"
require_relative "00_tree_node.rb"
s
display node
display nodes
s
display nodes
display node
s
display node
display nodes
